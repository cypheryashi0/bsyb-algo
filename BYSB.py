# -*- coding: utf-8 -*-
"""BSYB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15p8ySnXHmLv-gUqLzMr-cl4vMOMvuuqN
"""

! pip install torch memory_profiler matplotlib seaborn

import time
import torch
import numpy as np
import matplotlib.pyplot as plt
from memory_profiler import memory_usage
import seaborn as sns
import pandas as pd

# ===== Weighted Graph Generator =====
def random_weighted_adj_tensor(n, density=0.4, seed=42, max_weight=10):
    torch.manual_seed(seed)
    A = (torch.rand((n, n)) * max_weight).float()
    A[A > max_weight * density] = float('inf')
    A.fill_diagonal_(0)
    return A

# ===== BSYB-Floyd (Tensorized) =====
def bsyb_floyd(A):
    n = A.size(0)
    dist = A.clone()
    for k in range(n):
        dist = torch.minimum(dist, dist[:, k].unsqueeze(1) + dist[k, :].unsqueeze(0))
    return dist

# ===== Standard Floyd-Warshall (Numpy) =====
def floyd_standard(A_np):
    n = A_np.shape[0]
    dist = A_np.copy()
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i, k] + dist[k, j] < dist[i, j]:
                    dist[i, j] = dist[i, k] + dist[k, j]
    return dist

# ===== Memory + Time Measurement =====
def measure(name, func, *args):
    print(f"â†’ Running {name}...")
    start_time = time.time()
    mem_usage, result = memory_usage((func, args), retval=True, interval=0.05, timeout=300, max_usage=True)
    end_time = time.time()
    print(f"âœ“ Done: {name}: Time = {end_time - start_time:.4f}s | Mem = {mem_usage:.2f} MB\n")
    return {
        'name': name,
        'result': result,
        'time_s': end_time - start_time,
        'mem_mb': mem_usage
    }

# ===== Run Comparison =====
def run_floyd_comparison(sizes=[64, 128, 256,354,512], density=0.4):
    results = []

    for n in sizes:
        print(f"\nðŸ”µ Graph size: {n}")
        A_tensor = random_weighted_adj_tensor(n, density)
        A_numpy = A_tensor.numpy()

        r1 = measure("BSYB-Floyd", bsyb_floyd, A_tensor)
        r2 = measure("Standard Floyd", floyd_standard, A_numpy)

        d1 = r1['result']
        d2 = torch.from_numpy(r2['result'])
        diff = torch.abs(d1 - d2)
        max_diff = diff[~torch.isinf(diff)].max().item()

        print(f"âœ… Accuracy Check: Max difference = {max_diff:.6f}\n")

        results.append({
            'n': n,
            'algo': 'BSYB-Floyd',
            'time': r1['time_s'],
            'mem': r1['mem_mb']
        })
        results.append({
            'n': n,
            'algo': 'Standard Floyd',
            'time': r2['time_s'],
            'mem': r2['mem_mb']
        })

    return results

# ===== Plotting =====
def plot_floyd_comparison(results):
    df = pd.DataFrame(results)

    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    sns.lineplot(data=df, x="n", y="time", hue="algo", ax=axs[0], marker="o")
    sns.lineplot(data=df, x="n", y="mem", hue="algo", ax=axs[1], marker="s")

    axs[0].set_title("Execution Time (s)")
    axs[1].set_title("Memory Usage (MB)")
    axs[0].set_xlabel("Graph Size (n)")
    axs[1].set_xlabel("Graph Size (n)")

    axs[0].grid(True)
    axs[1].grid(True)
    plt.tight_layout()
    plt.show()

# ===== Summary Table =====
def print_summary(results):
    print("\nðŸ“Š Summary Table:")
    print(f"{'Size':<6} {'Algorithm':<20} {'Time (s)':>10} {'Memory (MB)':>15}")
    print("-" * 55)
    for r in results:
        print(f"{r['n']:<6} {r['algo']:<20} {r['time']:>10.4f} {r['mem']:>15.2f}")
    print("-" * 55)

# ===== Run All =====
graph_sizes = [64, 128, 256,354,512]  # Increase if Colab memory allows
results = run_floyd_comparison(graph_sizes)
print_summary(results)
plot_floyd_comparison(results)